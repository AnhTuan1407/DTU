CREATE DATABASE HW_PVMS;
USE HW_PVMS;

CREATE TABLE T_CUSTOMER (
    CUSTOMER_ID VARCHAR(10),
    CUSTOMER_NAME NVARCHAR(50) NOT NULL,
    CUSTOMER_ADDRESS NVARCHAR(50) NOT NULL,
    CITY NVARCHAR(50) NOT NULL,
    STATE NVARCHAR(50) NOT NULL,
    POSTAL_CODE VARCHAR(10) NOT NULL,
    CONSTRAINT pk_CUSTOMER_ID PRIMARY KEY(CUSTOMER_ID)
);

CREATE TABLE T_ORDER (
    ORDER_ID VARCHAR(10),
    ORDER_DATE DATE NOT NULL,
    CUSTOMER_ID VARCHAR(10) NOT NULL,
    CONSTRAINT pk_ORDER_ID PRIMARY KEY(ORDER_ID),
	CONSTRAINT fk_CUSTOMER_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES T_CUSTOMER(CUSTOMER_ID)
);

CREATE TABLE T_PRODUCT (
    PRODUCT_ID VARCHAR(10) ,
    PRODUCT_DESCRIPTION NVARCHAR(100) NOT NULL,
    PRODUCT_FINISH NVARCHAR(10) NOT NULL,
    STANDARD_PRICE FLOAT NOT NULL,
    STATE NVARCHAR(10) NOT NULL,
    PRODUCT_LINE_ID VARCHAR(10) NOT NULL,
    CONSTRAINT pk_PRODUCT_ID PRIMARY KEY(PRODUCT_ID),
	CONSTRAINT ch_STANDARD_PRICE CHECK(STANDARD_PRICE>=0)
);

CREATE TABLE T_ORDER_LINE (
    ORDER_ID VARCHAR(10),
    PRODUCT_ID VARCHAR(10),
    ORDERED_QUANTITY INT NOT NULL,
    CONSTRAINT pk_ORDER_UNE PRIMARY KEY(ORDER_ID,PRODUCT_ID),
	CONSTRAINT fk_ORDER_ID FOREIGN KEY(ORDER_ID) REFERENCES T_ORDER(ORDER_ID),
	CONSTRAINT fk_PRODUCT_ID FOREIGN KEY(PRODUCT_ID) REFERENCES T_PRODUCT(PRODUCT_ID),
	CONSTRAINT ch_ORDERED_QUANTITY CHECK(ORDERED_QUANTITY>=0)
);

INSERT INTO T_CUSTOMER VALUES 
(N'C001', N'Nguyễn Văn A', N'Cẩm Lệ', N'Đà Nẵng', N'Bình Thuận', N'99999' ),
(N'C002', N'Nguyễn Văn B', N'Thanh Khê', N'Đà Nẵng', N'Thạc Gián', N'99999' ),
(N'C003', N'Nguyễn Văn C', N'Ngũ Hành Sơn', N'Đà Nẵng', N'Thanh Bình', N'99999' ),
(N'C004', N'Phạm Thị C', N'Hòa Vang', N'Đà Nẵng', N'An Khê', N'99999' ),
(N'C005', N'Nguyễn Thị D', N'Sơn Trà', N'Đà Nẵng', N'Thuận Phước', N'99999' );


INSERT INTO T_PRODUCT VALUES 
(N'P001', N'Gà truyền thống', N'06/10/2024', 35000, N'Còn hàng', N'LINE001' ),
(N'P002', N'Gà sốt cay', N'06/10/2024', 30000, N'Còn hàng', N'LINE002' ),
(N'P003', N'Pepsi', N'06/10/2024', 10000, N'Còn hàng', N'LINE003' ),
(N'P004', N'Kem', N'06/10/2024', 5000, N'Còn hàng', N'LINE004' ),
(N'P005', N'Cơm', N'06/10/2024', 40000, N'Còn hàng', N'LINE005' );

INSERT INTO T_ORDER VALUES 
(N'O001', '2024-06-08', N'C001'),
(N'O002', '2024-06-09', N'C002'),
(N'O003', '2024-06-10', N'C001'),
(N'O004', '2024-06-10', N'C003'),
(N'O005', '2024-06-10', N'C005');


INSERT INTO T_ORDER_LINE VALUES 
(N'O001', N'P001', 2),
(N'O002', N'P001', 1),
(N'O003', N'P005', 2),
(N'O004', N'P002', 4),
(N'O005', N'P004', 5);

SELECT * FROM T_CUSTOMER;
SELECT * FROM T_PRODUCT;
SELECT * FROM T_ORDER;
SELECT * FROM T_ORDER_LINE;


--2. Các câu lệnh truy vấn 

--Hiển thị tất cả thông tin các bảng 
SELECT * FROM T_CUSTOMER;
SELECT * FROM T_PRODUCT;

--Hiển thị các sản phẩm còn hàng
SELECT * FROM T_PRODUCT 
WHERE STATE = N'Còn hàng';

--Hiển thị đơn hàng của khách hàng có mã C001
SELECT * FROM T_ORDER WHERE CUSTOMER_ID = N'C001';

--Hiển thị tổng số lượng sản phẩm đã được đặt hàng trong bảng T_ORDER_LINE
SELECT PRODUCT_ID, SUM(ORDERED_QUANTITY) as TOTALQUANTITY
FROM T_ORDER_LINE
GROUP BY PRODUCT_ID;

--Hiển thị các khách hàng thuộc 'Bình Thuận'
SELECT * FROM T_CUSTOMER WHERE STATE = N'Bình Thuận';

--Hiển thị các đơn hàng được đặt vào ngày '2024-06-10'
SELECT * FROM T_ORDER WHERE ORDER_DATE = '2024-06-10';

--Hiển thị tổng giá trị các đơn hàng của từng khách hàng
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME, SUM(P.STANDARD_PRICE * OL.ORDERED_QUANTITY) AS TOTAL_ORDER_VALUE
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_NAME;

--Hiển thị danh sách các khách hàng và các đơn hàng của họ
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME, O.ORDER_ID, O.ORDER_DATE
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID;

--Hiển thị các sản phẩm đã được đặt nhiều nhất
SELECT P.PRODUCT_ID, P.PRODUCT_DESCRIPTION, SUM(OL.ORDERED_QUANTITY) AS TOTAL_ORDER
FROM T_PRODUCT P
JOIN T_ORDER_LINE OL ON P.PRODUCT_ID = OL.PRODUCT_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_DESCRIPTION
ORDER BY TOTAL_ORDER DESC;

--Hiển thị chi tiết đơn hàng của khách hàng
SELECT O.CUSTOMER_ID, C.CUSTOMER_NAME, P.PRODUCT_DESCRIPTION, OL.ORDERED_QUANTITY, (P.STANDARD_PRICE * OL.ORDERED_QUANTITY) AS TOTAL_PRICE
FROM T_ORDER O JOIN T_CUSTOMER C
ON O.CUSTOMER_ID = C.CUSTOMER_ID
JOIN T_ORDER_LINE OL 
ON O.ORDER_ID = OL.ORDER_ID
JOIN T_PRODUCT P 
ON P.PRODUCT_ID = OL.PRODUCT_ID
WHERE O.CUSTOMER_ID = N'C001';

--Hiển thị tổng số lượng đặt hàng và tổng giá trị của mỗi khách hàng
SELECT C.CUSTOMER_ID,C.CUSTOMER_NAME,
COUNT(O.ORDER_ID) AS TOTAL_ORDERS,
SUM(P.STANDARD_PRICE * OL.ORDERED_QUANTITY) AS TOTAL_ORDER_VALUE
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_NAME
ORDER BY TOTAL_ORDER_VALUE DESC;

--Hiển thị các sản phẩm được đặt hàng nhiều nhất và số lượng khách hàng đã đặt sản phẩm đó
SELECT 
    P.PRODUCT_ID,
    P.PRODUCT_DESCRIPTION,
    SUM(OL.ORDERED_QUANTITY) AS TOTAL_ORDERED_QUANTITY,
    COUNT(DISTINCT O.CUSTOMER_ID) AS CUSTOMER_COUNT
FROM T_PRODUCT P
JOIN T_ORDER_LINE OL ON P.PRODUCT_ID = OL.PRODUCT_ID
JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_DESCRIPTION
ORDER BY TOTAL_ORDERED_QUANTITY DESC;

--Hiển thị các khách hàng có tổng giá trị đơn hàng lớn nhất
SELECT 
    C.CUSTOMER_ID,
    C.CUSTOMER_NAME,
    SUM(P.STANDARD_PRICE * OL.ORDERED_QUANTITY) AS TOTAL_ORDER_VALUE
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_NAME
ORDER BY TOTAL_ORDER_VALUE DESC

--Hiển thị số lượng đơn hàng của mỗi khách hàng
SELECT ORDER_DATE, SUM(ORDERED_QUANTITY) AS TOTAL_QUANTITY
FROM T_ORDER_LINE OL
JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
GROUP BY ORDER_DATE;

--Hiển thị các khách hàng đã đặt ít nhất một đơn hàng
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME
FROM T_CUSTOMER C
WHERE EXISTS (SELECT 1 FROM T_ORDER O WHERE O.CUSTOMER_ID = C.CUSTOMER_ID);

--Hiển thị các khách hàng có hơn 2 đơn hàng
SELECT CUSTOMER_ID, COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM T_ORDER
GROUP BY CUSTOMER_ID
HAVING COUNT(ORDER_ID) > 2;


--Hiển thị số lượng sản phẩm đã đặt theo từng ngày
SELECT ORDER_DATE, SUM(ORDERED_QUANTITY) AS TOTAL_QUANTITY
FROM T_ORDER_LINE OL
JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
GROUP BY ORDER_DATE;

--Hiển thị các sản phẩm có giá trị đơn hàng tổng cộng lớn hơn 100,000
SELECT P.PRODUCT_ID, P.PRODUCT_DESCRIPTION, SUM(OL.ORDERED_QUANTITY * P.STANDARD_PRICE) AS TOTAL_VALUE
FROM T_PRODUCT P
JOIN T_ORDER_LINE OL ON P.PRODUCT_ID = OL.PRODUCT_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_DESCRIPTION
HAVING SUM(OL.ORDERED_QUANTITY * P.STANDARD_PRICE) > 100000;

--Hiển thị các khách hàng đã đặt hàng và tổng số lượng sản phẩm đã đặt của họ
SELECT C.CUSTOMER_ID, C.CUSTOMER_NAME, SUM(OL.ORDERED_QUANTITY) AS TOTAL_ORDERED_QUANTITY
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
GROUP BY C.CUSTOMER_ID, C.CUSTOMER_NAME;

--Hiển thị các sản phẩm có số lượng đặt hàng trung bình lớn hơn 2
SELECT P.PRODUCT_ID, P.PRODUCT_DESCRIPTION, AVG(OL.ORDERED_QUANTITY) AS AVG_QUANTITY
FROM T_PRODUCT P
JOIN T_ORDER_LINE OL ON P.PRODUCT_ID = OL.PRODUCT_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_DESCRIPTION
HAVING AVG(OL.ORDERED_QUANTITY) > 2;

--Hiển thị các khách hàng đã đặt hàng trong tháng 6 năm 2024
SELECT DISTINCT C.CUSTOMER_ID, C.CUSTOMER_NAME
FROM T_CUSTOMER C
JOIN T_ORDER O ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.ORDER_DATE BETWEEN '2024-06-01' AND '2024-06-30';

SELECT * FROM T_CUSTOMER;
SELECT * FROM T_PRODUCT;
SELECT * FROM T_ORDER;
SELECT * FROM T_ORDER_LINE;

--3. Thay đổi dữ liệu

--Cập nhật tên khách hàng có mã 'C001'
UPDATE T_CUSTOMER 
SET CUSTOMER_NAME = N'Nguyễn Văn An'
WHERE CUSTOMER_ID = N'C001';

--Cập nhật giá sản phẩm 'P001'
UPDATE T_PRODUCT 
SET STANDARD_PRICE = 36000 
WHERE PRODUCT_ID = N'P001';

--Cập nhật số lượng sản phẩm đặt hàng trong đơn 'O001' và sản phẩm 'P001'
UPDATE T_ORDER_LINE 
SET ORDERED_QUANTITY = 3 
WHERE ORDER_ID = N'O001' AND PRODUCT_ID = N'P001';

--Xóa khách hàng có mã 'C005'
DELETE FROM T_CUSTOMER 
WHERE CUSTOMER_ID = N'C005';

--Xóa sản phẩm có mã 'P005'
DELETE FROM T_PRODUCT 
WHERE PRODUCT_ID = N'P005';

--Xóa đơn hàng có mã 'O005'
DELETE FROM T_ORDER 
WHERE ORDER_ID = N'O005';

--Xóa tất cả các bản ghi trong T_ORDER_LINE của đơn hàng 'O005'
DELETE FROM T_ORDER_LINE 
WHERE ORDER_ID = N'O005';

--Cập nhật trạng thái của tất cả các sản phẩm còn hàng thành 'Hết hàng'
UPDATE T_PRODUCT 
SET STATE = N'Hết hàng'
WHERE STATE = N'Còn hàng';


--Cập nhật địa chỉ của khách hàng 'C003'
UPDATE T_CUSTOMER 
SET CUSTOMER_ADDRESS = N'Hải Châu'
WHERE CUSTOMER_ID = N'C003';

--Xóa tất cả các đơn hàng có ngày đặt trước '2024-06-10'
DELETE FROM T_ORDER 
WHERE ORDER_DATE < '2024-06-10';

--Xóa tất cả các sản phẩm có giá dưới 10,000
DELETE FROM T_PRODUCT 
WHERE STANDARD_PRICE < 10000;

--Cập nhật số lượng đặt hàng cho sản phẩm 'P002' trong đơn hàng 'O004'
UPDATE T_ORDER_LINE 
SET ORDERED_QUANTITY = 5
WHERE ORDER_ID = N'O004' AND PRODUCT_ID = N'P002';

--Xóa tất cả các đơn hàng không có trong bảng T_ORDER_LINE
DELETE FROM T_ORDER 
WHERE ORDER_ID NOT IN (SELECT ORDER_ID FROM T_ORDER_LINE);

--Cập nhật tất cả các địa chỉ khách hàng tại thành phố 'Đà Nẵng' thành 'Hải Châu'
UPDATE T_CUSTOMER 
SET CUSTOMER_ADDRESS = N'Hải Châu'
WHERE CITY = N'Đà Nẵng';

--Xóa tất cả các bản ghi trong T_ORDER_LINE có số lượng đặt hàng là 0
DELETE FROM T_ORDER_LINE 
WHERE ORDERED_QUANTITY = 0;

--Xóa tất cả các khách hàng không có đơn hàng nào
DELETE FROM T_CUSTOMER 
WHERE CUSTOMER_ID NOT IN (SELECT CUSTOMER_ID FROM T_ORDER);

--Cập nhật giá của tất cả các sản phẩm lên 10%
UPDATE T_PRODUCT 
SET STANDARD_PRICE = STANDARD_PRICE * 1.10;

--Cập nhật trạng thái sản phẩm 'P003' thành 'Hết hàng'
UPDATE T_PRODUCT 
SET STATE = N'Hết hàng'
WHERE PRODUCT_ID = N'P003';

--Cập nhật giá của tất cả các sản phẩm có giá lớn hơn 30,000 giảm 5%
UPDATE T_PRODUCT 
SET STANDARD_PRICE = STANDARD_PRICE * 0.95
WHERE STANDARD_PRICE > 30000;

--Xóa tất cả các đơn hàng có tổng giá trị nhỏ hơn 50,000
DELETE FROM T_ORDER 
WHERE ORDER_ID IN (
    SELECT O.ORDER_ID 
    FROM T_ORDER O
    JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
    JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY O.ORDER_ID
    HAVING SUM(P.STANDARD_PRICE * OL.ORDERED_QUANTITY) < 50000
);

--Cập nhật trạng thái của tất cả các sản phẩm có số lượng đặt hàng lớn hơn 10 thành 'Hết hàng'
UPDATE T_PRODUCT
SET STATE = N'Hết hàng'
WHERE PRODUCT_ID IN (
    SELECT PRODUCT_ID 
    FROM T_ORDER_LINE
    GROUP BY PRODUCT_ID
    HAVING SUM(ORDERED_QUANTITY) > 10
);

--Xóa các sản phẩm liên qua đến gà
DELETE FROM T_PRODUCT 
WHERE PRODUCT_DESCRIPTION LIKE N'%Gà%';

--Xóa tất cả các đơn hàng có khách hàng ở thành phố 'Đà Nẵng'
DELETE FROM T_ORDER 
WHERE CUSTOMER_ID IN (
    SELECT CUSTOMER_ID 
    FROM T_CUSTOMER 
    WHERE CITY = N'Đà Nẵng'
);

--Cập nhật giá của tất cả các sản phẩm dựa trên số lượng đặt hàng của chúng. 
--> 5 giá tăng 15%, ngược lại giảm 10%
UPDATE T_PRODUCT 
SET STANDARD_PRICE = CASE 
    WHEN (SELECT SUM(ORDERED_QUANTITY) 
          FROM T_ORDER_LINE 
          WHERE T_ORDER_LINE.PRODUCT_ID = T_PRODUCT.PRODUCT_ID) > 5
    THEN STANDARD_PRICE * 1.15
    ELSE STANDARD_PRICE * 0.90
END;

--Xóa tất cả các sản phẩm mà chưa từng được đặt hàng
DELETE FROM T_PRODUCT
WHERE PRODUCT_ID NOT IN (
    SELECT DISTINCT PRODUCT_ID 
    FROM T_ORDER_LINE
)

--Xóa tất cả các khách hàng và các đơn hàng của họ nếu họ không đặt hàng nào trong năm 2024
DELETE FROM T_ORDER
WHERE CUSTOMER_ID IN (
    SELECT CUSTOMER_ID
    FROM T_CUSTOMER
    WHERE CUSTOMER_ID NOT IN (
        SELECT DISTINCT CUSTOMER_ID 
        FROM T_ORDER 
        WHERE YEAR(ORDER_DATE) = 2024
    )
);

DELETE FROM T_CUSTOMER
WHERE CUSTOMER_ID NOT IN (
    SELECT DISTINCT CUSTOMER_ID 
    FROM T_ORDER 
    WHERE YEAR(ORDER_DATE) = 2024
);


--THỦ TỤC (PROCEDURE)

--5.1. Viết thủ tục Insert dữ liệu cho các bảng có kiểm tra ràng buộc

--Thủ tục nhập cho bảng T_PRODUCT 
CREATE PROCEDURE SP_NHAP_T_PRODUCT
@PRODUCT_ID VARCHAR(10), @PRODUCT_DESCRIPTION NVARCHAR(100), @PRODUCT_FINISH NVARCHAR(10), 
@STANDARD_PRICE FLOAT, @STATE NVARCHAR(10), @PRODUCT_UNE_ID NVARCHAR(10)
AS
	BEGIN 
		IF EXISTS (SELECT * FROM T_PRODUCT WHERE PRODUCT_ID = @PRODUCT_ID)
			BEGIN
				PRINT N'TRÙNG MÃ SẢN PHẨM. KIỂM TRA LẠI.'
			END			
		ELSE 
			IF @STANDARD_PRICE < 0
				PRINT N'GIÁ SẢN PHẨM PHẢI LỚN HƠN 0.'
			ELSE
				BEGIN
					INSERT INTO T_PRODUCT VALUES (@PRODUCT_ID, @PRODUCT_DESCRIPTION, @PRODUCT_FINISH, @STANDARD_PRICE, @STATE, @PRODUCT_UNE_ID)
					PRINT N'THÊM SẢN PHẨM THÀNH CÔNG.'
				END
	END

SELECT * FROM T_PRODUCT;
EXEC SP_NHAP_T_PRODUCT 'P006', N'Gà sốt trứng muối', '06/16/2024', 40000, N'Còn hàng', 'LINE006';

--Thủ tục nhập bảng T_CUSTOMER
CREATE PROCEDURE SP_NHAP_T_CUSTOMER
@CUSTOMER_ID VARCHAR(10), @CUSTOMER_NAME NVARCHAR(50), @CUSTOMER_ADDRESS NVARCHAR(50), 
@CITY NVARCHAR(50), @STATE NVARCHAR(10), @POSTAL_CODE NVARCHAR(10)
AS
	BEGIN 
		IF EXISTS (SELECT * FROM T_CUSTOMER WHERE CUSTOMER_ID = @CUSTOMER_ID)
			PRINT N'TRÙNG MÃ KHÁCH HÀNG. KIỂM TRA LẠI.'
		ELSE
			BEGIN
				INSERT INTO T_CUSTOMER VALUES (@CUSTOMER_ID, @CUSTOMER_NAME, @CUSTOMER_ADDRESS, @CITY, @STATE, @POSTAL_CODE)
				PRINT N'THÊM KHÁCH HÀNG THÀNH CÔNG.'
			END
	END

SELECT * FROM T_CUSTOMER;
EXEC SP_NHAP_T_CUSTOMER 'C006', N'Trần Thị E', N'Hải Châu', N'Đà Nẵng', 'Nhơn Hòa', '99999';

--Thủ tục nhập bảng T_ORDER
CREATE PROCEDURE SP_NHAP_T_ORDER
@ORDER_ID VARCHAR(10), @ORDER_DATE DATE, @CUSTOMER_ID VARCHAR(10)
AS
	BEGIN 
		IF NOT EXISTS (SELECT * FROM T_CUSTOMER WHERE CUSTOMER_ID = @CUSTOMER_ID)
			PRINT N'KHÔNG TỒN TẠI KHÁCH HÀNG NÀY. KIỂM TRA LẠI.'
		ELSE
			IF EXISTS (SELECT * FROM T_ORDER WHERE ORDER_ID = @ORDER_ID)
				PRINT N'TRÙNG MÃ ĐƠN HÀNG. KIỂM TRA LẠI.'
			ELSE
				BEGIN
					INSERT INTO T_ORDER VALUES (@ORDER_ID, @ORDER_DATE, @CUSTOMER_ID)
					PRINT N'NHẬP ĐƠN ĐẶT HÀNG THÀNH CÔNG.'
				END
	END

SELECT * FROM T_ORDER;
SELECT * FROM T_CUSTOMER;
EXEC SP_NHAP_T_ORDER 'O006', '2024-06-12', 'C006';

--Thủ tục nhập bảng T_ORDER_LINE
CREATE PROCEDURE SP_NHAP_T_ORDER_LINE
@ORDER_ID VARCHAR(10), @PRODUCT_ID VARCHAR(10), @ORDERED_QUANTITY INT
AS
	BEGIN 
		IF NOT EXISTS (SELECT * FROM T_ORDER WHERE ORDER_ID = @ORDER_ID)
			PRINT N'KHÔNG TỒN TẠI ĐƠN HÀNG NÀY. KIỂM TRA LẠI.'
		ELSE
			IF NOT EXISTS (SELECT * FROM T_PRODUCT WHERE PRODUCT_ID = @PRODUCT_ID)
				PRINT N'KHÔNG TỒN TẠI SẢN PHẨM NÀY. KIỂM TRA LẠI.'
			ELSE
				IF EXISTS (SELECT * FROM T_ORDER_LINE WHERE ORDER_ID = @ORDER_ID AND PRODUCT_ID = @PRODUCT_ID)
					PRINT N'TRÙNG ĐƠN HÀNG. KIỂM TRA LẠI.'
				ELSE
					IF @ORDERED_QUANTITY < 0
						PRINT N'SỐ LƯỢNG ĐẶT HÀNG PHẢI LỚN HƠN 0'
					ELSE
						BEGIN
							INSERT INTO T_ORDER_LINE VALUES (@ORDER_ID, @PRODUCT_ID, @ORDERED_QUANTITY)
							PRINT N'THÊM ĐƠN HÀNG THÀNH CÔNG.'
						END
	END

SELECT * FROM T_ORDER_LINE;
SELECT * FROM T_PRODUCT;
EXEC SP_NHAP_T_ORDER_LINE 'O006', 'P006', 4;

--5.2. Cho biết thông tin hóa đơn của khách hàng khi nhân viên nhập vào MAKH, Ngày mua hàng

CREATE PROCEDURE SP_THONGTINKH
@CUSTOMER_ID VARCHAR(10), @ORDER_DATE DATE
AS
	BEGIN
		IF NOT EXISTS (SELECT * FROM T_CUSTOMER WHERE CUSTOMER_ID = @CUSTOMER_ID)
			PRINT N'KHÔNG TỒN TẠI KHÁCH HÀNG NÀY.'
		ELSE
			IF NOT EXISTS (SELECT * FROM T_ORDER WHERE CUSTOMER_ID = @CUSTOMER_ID)
				PRINT N'KHÁCH HÀNG NÀY CHƯA CÓ ĐƠN HÀNG NÀO.'
			ELSE
				IF NOT EXISTS (SELECT * FROM T_ORDER WHERE ORDER_DATE = @ORDER_DATE)
					PRINT N'KHÔNG CÓ ĐƠN HÀNG NÀO VÀO NGÀY NÀY.'
				ELSE
					SELECT * FROM T_CUSTOMER C 
					JOIN T_ORDER O 
					ON C.CUSTOMER_ID = O.CUSTOMER_ID 
					WHERE O.CUSTOMER_ID = @CUSTOMER_ID AND O.ORDER_DATE = @ORDER_DATE
	END

EXEC SP_THONGTINKH 'C006', '2024-06-12';

--5.3. Viết thủ tục khi nhập ORDER_ID hiển thị thông tin khách hàng mua những mặt hàng gì, thành tiền bao nhiêu
CREATE PROCEDURE SP_THONGTINMUAHANG
@ORDER_ID VARCHAR(10)
AS
	BEGIN
		IF NOT EXISTS (SELECT * FROM T_ORDER WHERE ORDER_ID = @ORDER_ID)
			PRINT N'KHÔNG TỒN TẠI ĐƠN HÀNG NÀY. KIỂM TRA LẠI.'
		ELSE
			SELECT O.ORDER_ID, C.CUSTOMER_NAME, P.PRODUCT_DESCRIPTION, 
			P.STANDARD_PRICE, OL.ORDERED_QUANTITY, (P.STANDARD_PRICE * OL.ORDERED_QUANTITY) AS N'TOTAL_PRICE' FROM T_ORDER_LINE OL 
			JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
			JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
			JOIN T_CUSTOMER C ON C.CUSTOMER_ID = O.CUSTOMER_ID
			WHERE O.ORDER_ID = @ORDER_ID
	END

SELECT * FROM T_ORDER;
SELECT * FROM T_PRODUCT;
SELECT * FROM T_ORDER_LINE;
EXEC SP_THONGTINMUAHANG 'O001';

--5.4. Viết thủ tục cho biết thông tin những mặt hàng nào được bán ra trong ngày, khi nhập ngày
CREATE PROCEDURE SP_THONG_TIN_HANG_TRONG_NGAY
@ORDER_DATE DATE
AS
	BEGIN
		IF NOT EXISTS (SELECT * FROM T_ORDER WHERE ORDER_DATE = @ORDER_DATE)
			PRINT N'KHÔNG CÓ ĐƠN HÀNG NÀO ĐƯỢC BÁN RA TRONG NGÀY NÀY.'
		ELSE
			SELECT P.PRODUCT_DESCRIPTION, O.ORDER_DATE
			FROM T_ORDER_LINE OL 
			JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
			JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
			WHERE O.ORDER_DATE = @ORDER_DATE
	END

EXEC SP_THONG_TIN_HANG_TRONG_NGAY '2024-06-10';

--5.5. Viết thủ tục tìm khách hàng mua mặt hàng 'xxxx' trong tháng/năm

CREATE PROCEDURE SP_THONG_TIN_HANG_TRONG_THANG
@PRODUCT_DESCRIPTION NVARCHAR(100), @ORDER_DATE DATE
AS
	BEGIN
		IF NOT EXISTS (SELECT * FROM T_PRODUCT WHERE PRODUCT_DESCRIPTION = @PRODUCT_DESCRIPTION)
			PRINT N'KHÔNG CÓ SẢN PHẨM TÊN NÀY.'
		ELSE
			IF YEAR(@ORDER_DATE) > YEAR(GETDATE())
				PRINT N'NĂM KHÔNG HỢP LỆ. KIỂM TRA LẠI'
			ELSE
				IF NOT EXISTS (SELECT * FROM T_ORDER WHERE MONTH(ORDER_DATE) = MONTH(@ORDER_DATE))
					PRINT N'KHÔNG CÓ ĐƠN HÀNG NÀO ĐƯỢC BÁN RA TRONG THÁNG NÀY.'
				ELSE
					SELECT C.CUSTOMER_NAME, P.PRODUCT_DESCRIPTION, O.ORDER_DATE
					FROM T_ORDER_LINE OL 
					JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
					JOIN T_ORDER O ON OL.ORDER_ID = O.ORDER_ID
					JOIN T_CUSTOMER C ON C.CUSTOMER_ID = O.CUSTOMER_ID
					WHERE MONTH(O.ORDER_DATE) = MONTH(@ORDER_DATE) AND YEAR(O.ORDER_DATE) = YEAR(@ORDER_DATE) AND P.PRODUCT_DESCRIPTION = @PRODUCT_DESCRIPTION
	END

EXEC SP_THONG_TIN_HANG_TRONG_THANG N'Cơm', '2024-06-30';

--6. TRIGGER 

--6.1. Tạo bảng
CREATE TABLE INVOICE(
INVOICE_NUMBER INT,
ORDER_ID VARCHAR(10) NOT NULL,
INVOICE_DATE DATE NOT NULL,
CONSTRAINT pk_INVOICE_NUMBER PRIMARY KEY(INVOICE_NUMBER),
CONSTRAINT fk_ORDER_ID_INVOICE FOREIGN KEY(ORDER_ID) REFERENCES T_ORDER(ORDER_ID),
CONSTRAINT uq_ORDER_ID UNIQUE(ORDER_ID)
);

create table PAYMENT(
INVOICE_NUMBER INT NOT NULL,
PAYMENT_DATE DATE,
PAYMENT_AMOUNT FLOAT NOT NULL,
CONSTRAINT pk_PAYMENT_DATE PRIMARY KEY(PAYMENT_DATE),
CONSTRAINT fk_INVOICE_NUMBER FOREIGN KEY(INVOICE_NUMBER) REFERENCES INVOICE(INVOICE_NUMBER),
);

create table HISTORY_INVOICE(
INVOICE_NUMBER INT,
PAYMENT_TOTAL FLOAT NOT NULL,
AMOUNT_OWED FLOAT NOT NULL,
CONSTRAINT fk_INVOICE_NUMBER_HISTORY FOREIGN KEY(INVOICE_NUMBER) REFERENCES INVOICE(INVOICE_NUMBER),
CONSTRAINT uq_INVOICE_NUMBER UNIQUE(INVOICE_NUMBER)
);

--Viết trigger khi nhập dữ liệu cho bảng invoice thì dữ liệu bảng history_invoice cũng được thêm vào với pay_total = amount_owed = sum (ordered_quantity*standard_price)
CREATE TRIGGER TR_THEM_INVOICE
ON INVOICE
FOR INSERT
AS
BEGIN
	DECLARE @INVOICE_NUMBER INT
    DECLARE @ORDER_ID VARCHAR(10)
	SELECT @INVOICE_NUMBER = INVOICE_NUMBER, @ORDER_ID = ORDER_ID FROM INSERTED
	IF NOT EXISTS(SELECT * FROM T_ORDER WHERE ORDER_ID = @ORDER_ID)
    BEGIN
        RAISERROR('ĐƠN HÀNG NÀY KHÔNG TỒN TẠI. KIỂM TRA LẠI', 16, 1)
        ROLLBACK TRANSACTION
        RETURN
    END

	IF EXISTS(SELECT * FROM INVOICE WHERE INVOICE_NUMBER = @INVOICE_NUMBER)
	BEGIN
		RAISERROR('TRÙNG MÃ HÓA ĐƠN. KIỂM TRA LẠI', 16, 1)
		ROLLBACK TRANSACTION
		RETURN
	END

    INSERT INTO HISTORY_INVOICE (INVOICE_NUMBER, PAYMENT_TOTAL, AMOUNT_OWED)
    SELECT I.INVOICE_NUMBER,
    SUM(OL.ORDERED_QUANTITY * P.STANDARD_PRICE) AS PAYMENT_TOTAL,
    SUM(OL.ORDERED_QUANTITY * P.STANDARD_PRICE) AS AMOUNT_OWED
    FROM INSERTED I
    JOIN T_ORDER O ON I.ORDER_ID = O.ORDER_ID
    JOIN T_ORDER_LINE OL ON O.ORDER_ID = OL.ORDER_ID
    JOIN T_PRODUCT P ON OL.PRODUCT_ID = P.PRODUCT_ID
    GROUP BY I.INVOICE_NUMBER;
END;

SELECT * FROM T_ORDER;
SELECT * FROM INVOICE;
SELECT * FROM HISTORY_INVOICE;
INSERT INTO INVOICE VALUES (001, 'O001', '2024-06-08');

--Viết trigger khi khách hàng thanh toán tiền payment_amount thì số tiền trong amount_owed cũng giảm theo
CREATE TRIGGER TR_UPDATE_AMOUNT_OWED
ON PAYMENT
FOR INSERT
AS
BEGIN
	DECLARE @INVOICE_NUMBER INT

	SET @INVOICE_NUMBER = (SELECT INVOICE_NUMBER FROM INSERTED)
		
	IF NOT EXISTS (SELECT * FROM INVOICE WHERE INVOICE_NUMBER = @INVOICE_NUMBER)
		BEGIN
			RAISERROR('KHÔNG TỒN TẠI HÓA ĐƠN NÀY. KIỂM TRA LẠI', 16, 1);
			ROLLBACK TRANSACTION;
			RETURN;
		END

    UPDATE HISTORY_INVOICE
    SET AMOUNT_OWED = AMOUNT_OWED - i.PAYMENT_AMOUNT
    FROM INSERTED i
    WHERE HISTORY_INVOICE.INVOICE_NUMBER = i.INVOICE_NUMBER;
END;

SELECT * FROM HISTORY_INVOICE;
SELECT * FROM PAYMENT;
INSERT INTO PAYMENT VALUES (001, '2024-06-08', 35000);

--7. FUNCTION

--Hàm Tính tổng số lượng khách hàng đặt hàng trong ngày,hiển thị những ngày có tổng số lượng khách hàng đặt lớn hơn ngày hiện tại--

CREATE FUNCTION F_SL_KHACH_MUA(@ORDER_DAY DATE)
RETURNS @KETQUA TABLE (ORDER_DATE DATE, TOTAL_CUSTOMER INT)
AS
	BEGIN
		DECLARE @SOLUONG int
		SELECT @SOLUONG = COUNT(DISTINCT CUSTOMER_ID) 
		FROM T_ORDER
		WHERE ORDER_DATE = @ORDER_DAY 
		
		INSERT INTO @KETQUA (ORDER_DATE, TOTAL_CUSTOMER)
		SELECT ORDER_DATE, COUNT(DISTINCT CUSTOMER_ID) AS TOTAL_CUSTOMER
		FROM T_ORDER
		GROUP BY ORDER_DATE
		HAVING COUNT(DISTINCT CUSTOMER_ID) > @SOLUONG
		RETURN
	END

SELECT * FROM  DBO.F_SL_KHACH_MUA('2024-06-12')


--Viết hàm để xem tổng số đầu một hàng cho các nhóm hàng khí NSD nhập vào ProductID Biết rằng format của productID là x00000, trong đó X là mã nhóm hàng Xem nhóm hàng điện từ
CREATE FUNCTION F_DEM_SL_HANG(@PRODUCT_ID VARCHAR(10))
RETURNS INT 
AS
	BEGIN
		DECLARE @SOLUONG INT;
        SELECT @SOLUONG = COUNT(DISTINCT PRODUCT_ID)
		FROM T_PRODUCT
		WHERE LEFT(PRODUCT_LINE_ID, 1) = LEFT(@PRODUCT_ID, 1);
		RETURN @SOLUONG;
	END

SELECT * FROM T_PRODUCT;
SELECT DBO.F_DEM_SL_HANG('E00001')

--8. INDEX
--4.
--b. 
SELECT TOP 1 P.PRODUCT_FINISH, SUM(OL.ORDERED_QUANTITY) AS UNITS_SOLD
FROM T_CUSTOMER C, T_PRODUCT P, T_ORDER O, T_ORDER_LINE OL
WHERE C.CUSTOMER_ID = O.CUSTOMER_ID
AND O.ORDER_ID = OL.ORDER_ID
AND P.PRODUCT_ID = OL.PRODUCT_ID
AND O.ORDER_DATE BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY P.PRODUCT_FINISH 
ORDER BY UNITS_SOLD DESC;

--c.
--ALL ORDERS
SELECT O.ORDER_ID, O.ORDER_DATE, C.CUSTOMER_ID, C.CUSTOMER_NAME
FROM T_PRODUCT P, T_CUSTOMER C, T_ORDER O, T_ORDER_LINE OL
WHERE C.CUSTOMER_ID = O.CUSTOMER_ID
AND O.ORDER_ID = OL.ORDER_ID
AND P.PRODUCT_ID = OL.PRODUCT_ID
AND O.ORDER_DATE BETWEEN '2024-06-01' AND '2024-06-30';

--ORDER DETAIL
SELECT P.PRODUCT_DESCRIPTION, SUM(OL.ORDERED_QUANTITY) AS ORDERED_QUANTITY, P.STANDARD_PRICE, (ORDERED_QUANTITY * STANDARD_PRICE) AS TOTAL_PRICE
FROM T_PRODUCT P, T_CUSTOMER C, T_ORDER O, T_ORDER_LINE OL
WHERE C.CUSTOMER_ID = O.CUSTOMER_ID
AND O.ORDER_ID = OL.ORDER_ID
AND P.PRODUCT_ID = OL.PRODUCT_ID
AND O.ORDER_DATE BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY P.PRODUCT_DESCRIPTION, P.STANDARD_PRICE, ORDERED_QUANTITY;

--d. 
SELECT P.PRODUCT_LINE_ID, SUM(OL.ORDERED_QUANTITY) AS QUANTITY_SOLD
FROM T_CUSTOMER C, T_PRODUCT P, T_ORDER O, T_ORDER_LINE OL
WHERE C.CUSTOMER_ID = O.CUSTOMER_ID
AND O.ORDER_ID = OL.ORDER_ID
AND P.PRODUCT_ID = OL.PRODUCT_ID
AND O.ORDER_DATE BETWEEN '2024-06-01' AND '2024-06-30'
GROUP BY P.PRODUCT_LINE_ID;

